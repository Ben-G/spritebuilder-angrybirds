<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CCTransition.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CCTransition</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
            
			
			<NodeRef refid="125"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTransition/setOutgoingDownScale:</TokenIdentifier>
			<Abstract type="html">Will downscale incoming and outgoing scene
Can be used as an effect, or to decrease render time on complex scenes
Default 1.0</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) float outgoingDownScale</Declaration>
			
			
			<Anchor>//api/name/outgoingDownScale</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTransition/outgoingDownScale</TokenIdentifier>
			<Abstract type="html">Will downscale incoming and outgoing scene
Can be used as an effect, or to decrease render time on complex scenes
Default 1.0</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) float outgoingDownScale</Declaration>
			
			
			<Anchor>//api/name/outgoingDownScale</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTransition/outgoingDownScale</TokenIdentifier>
			<Abstract type="html">Will downscale incoming and outgoing scene
Can be used as an effect, or to decrease render time on complex scenes
Default 1.0</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) float outgoingDownScale</Declaration>
			
			
			<Anchor>//api/name/outgoingDownScale</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTransition/setRetinaTransition:</TokenIdentifier>
			<Abstract type="html">Transition will be performed in retina resolution
Will force outgoingDownScale and incomingDownScale to 1.0 on non retina devices, and 2.0 on retina devices if not set
Default YES</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isRetinaTransition) BOOL retinaTransition</Declaration>
			
			
			<Anchor>//api/name/retinaTransition</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTransition/isRetinaTransition</TokenIdentifier>
			<Abstract type="html">Transition will be performed in retina resolution
Will force outgoingDownScale and incomingDownScale to 1.0 on non retina devices, and 2.0 on retina devices if not set
Default YES</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isRetinaTransition) BOOL retinaTransition</Declaration>
			
			
			<Anchor>//api/name/retinaTransition</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTransition/retinaTransition</TokenIdentifier>
			<Abstract type="html">Transition will be performed in retina resolution
Will force outgoingDownScale and incomingDownScale to 1.0 on non retina devices, and 2.0 on retina devices if not set
Default YES</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isRetinaTransition) BOOL retinaTransition</Declaration>
			
			
			<Anchor>//api/name/retinaTransition</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTransition/setTransitionPixelFormat:</TokenIdentifier>
			<Abstract type="html">Pixel format used for transition
Default kCCTexture2DPixelFormat_RGB565</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) CCTexturePixelFormat transitionPixelFormat</Declaration>
			
			
			<Anchor>//api/name/transitionPixelFormat</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTransition/transitionPixelFormat</TokenIdentifier>
			<Abstract type="html">Pixel format used for transition
Default kCCTexture2DPixelFormat_RGB565</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) CCTexturePixelFormat transitionPixelFormat</Declaration>
			
			
			<Anchor>//api/name/transitionPixelFormat</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTransition/transitionPixelFormat</TokenIdentifier>
			<Abstract type="html">Pixel format used for transition
Default kCCTexture2DPixelFormat_RGB565</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) CCTexturePixelFormat transitionPixelFormat</Declaration>
			
			
			<Anchor>//api/name/transitionPixelFormat</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTransition/setOutgoingSceneAnimated:</TokenIdentifier>
			<Abstract type="html">Defines whether incoming and outgoing scene will be animated during transition
Default NO</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isOutgoingSceneAnimated) BOOL outgoingSceneAnimated</Declaration>
			
			
			<Anchor>//api/name/outgoingSceneAnimated</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTransition/isOutgoingSceneAnimated</TokenIdentifier>
			<Abstract type="html">Defines whether incoming and outgoing scene will be animated during transition
Default NO</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isOutgoingSceneAnimated) BOOL outgoingSceneAnimated</Declaration>
			
			
			<Anchor>//api/name/outgoingSceneAnimated</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTransition/outgoingSceneAnimated</TokenIdentifier>
			<Abstract type="html">Defines whether incoming and outgoing scene will be animated during transition
Default NO</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isOutgoingSceneAnimated) BOOL outgoingSceneAnimated</Declaration>
			
			
			<Anchor>//api/name/outgoingSceneAnimated</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTransition/setRunTime:</TokenIdentifier>
			<Abstract type="html">The actual transition runtime in seconds</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSTimeInterval runTime</Declaration>
			
			
			<Anchor>//api/name/runTime</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTransition/runTime</TokenIdentifier>
			<Abstract type="html">The actual transition runtime in seconds</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSTimeInterval runTime</Declaration>
			
			
			<Anchor>//api/name/runTime</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTransition/runTime</TokenIdentifier>
			<Abstract type="html">The actual transition runtime in seconds</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSTimeInterval runTime</Declaration>
			
			
			<Anchor>//api/name/runTime</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTransition/setProgress:</TokenIdentifier>
			<Abstract type="html">Normalized transition progress</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) float progress</Declaration>
			
			
			<Anchor>//api/name/progress</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTransition/progress</TokenIdentifier>
			<Abstract type="html">Normalized transition progress</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) float progress</Declaration>
			
			
			<Anchor>//api/name/progress</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTransition/progress</TokenIdentifier>
			<Abstract type="html">Normalized transition progress</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) float progress</Declaration>
			
			
			<Anchor>//api/name/progress</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCTransition/crossFadeWithDuration:</TokenIdentifier>
			<Abstract type="html">Creates a cross fade transition</Abstract>
			<DeclaredIn>CCTransition.h</DeclaredIn>
			
			<Declaration>+ (CCTransition *)crossFadeWithDuration:(NSTimeInterval)duration</Declaration>
			<Parameters>
				<Parameter>
					<Name>duration</Name>
					<Abstract type="html">The duration of the transition in seconds</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A CCTransition</Abstract></ReturnValue>
			<Anchor>//api/name/crossFadeWithDuration:</Anchor>
            <NodeRef refid="125"/>
		</Token>
		
        
	</File>
</Tokens>