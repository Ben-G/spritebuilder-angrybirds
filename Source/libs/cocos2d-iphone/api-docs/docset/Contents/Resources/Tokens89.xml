<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CCNode.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CCNode</TokenIdentifier>
			<Abstract type="html">CCNode is the base class for all objects displayed by Cocos2d. The nodes are hierachically organized in a tree, normally with a CCScene as its root node. Example of CCNode:s are CCSprite, CCScene and CCButton. The CCNode handles transformations, can have a content size and provides a coordinate system to its children. Any CCNode or subclass can handle user interaction, such as touches and mouse events, see the CCResponder for more information on this.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
            
			
			<NodeRef refid="89"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCNode/node</TokenIdentifier>
			<Abstract type="html">Allocates and initializes a node.
The node will be created as &quot;autorelease&quot;.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>+ (id)node</Declaration>
			
			
			<Anchor>//api/name/node</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/init</TokenIdentifier>
			<Abstract type="html">Initializes the node</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (id)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setPaused:</TokenIdentifier>
			<Abstract type="html">If paused, no callbacks will be called, and no actions will be run.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL paused</Declaration>
			
			
			<Anchor>//api/name/paused</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/paused</TokenIdentifier>
			<Abstract type="html">If paused, no callbacks will be called, and no actions will be run.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL paused</Declaration>
			
			
			<Anchor>//api/name/paused</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/paused</TokenIdentifier>
			<Abstract type="html">If paused, no callbacks will be called, and no actions will be run.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL paused</Declaration>
			
			
			<Anchor>//api/name/paused</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setVisible:</TokenIdentifier>
			<Abstract type="html">Whether of not the node is visible. Default is YES</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) BOOL visible</Declaration>
			
			
			<Anchor>//api/name/visible</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/visible</TokenIdentifier>
			<Abstract type="html">Whether of not the node is visible. Default is YES</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) BOOL visible</Declaration>
			
			
			<Anchor>//api/name/visible</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/visible</TokenIdentifier>
			<Abstract type="html">Whether of not the node is visible. Default is YES</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) BOOL visible</Declaration>
			
			
			<Anchor>//api/name/visible</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setName:</TokenIdentifier>
			<Abstract type="html">A tag used to identify the node easily</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/name</TokenIdentifier>
			<Abstract type="html">A tag used to identify the node easily</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/name</TokenIdentifier>
			<Abstract type="html">A tag used to identify the node easily</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setUserObject:</TokenIdentifier>
			<Abstract type="html">Similar to userData, but instead of holding a void* it holds an id</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, strong) id userObject</Declaration>
			
			
			<Anchor>//api/name/userObject</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/userObject</TokenIdentifier>
			<Abstract type="html">Similar to userData, but instead of holding a void* it holds an id</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, strong) id userObject</Declaration>
			
			
			<Anchor>//api/name/userObject</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/userObject</TokenIdentifier>
			<Abstract type="html">Similar to userData, but instead of holding a void* it holds an id</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, strong) id userObject</Declaration>
			
			
			<Anchor>//api/name/userObject</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setPosition:</TokenIdentifier>
			<Abstract type="html">Position (x,y) of the node in the unit specified by the positionType property. The distance is measured from one of the corners of the node&apos;s parent container, which corner is specified by the positionType property. Default setting is referencing the bottom left corner in points.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) CGPoint position</Declaration>
			
			
			<Anchor>//api/name/position</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/position</TokenIdentifier>
			<Abstract type="html">Position (x,y) of the node in the unit specified by the positionType property. The distance is measured from one of the corners of the node&apos;s parent container, which corner is specified by the positionType property. Default setting is referencing the bottom left corner in points.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) CGPoint position</Declaration>
			
			
			<Anchor>//api/name/position</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/position</TokenIdentifier>
			<Abstract type="html">Position (x,y) of the node in the unit specified by the positionType property. The distance is measured from one of the corners of the node&apos;s parent container, which corner is specified by the positionType property. Default setting is referencing the bottom left corner in points.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) CGPoint position</Declaration>
			
			
			<Anchor>//api/name/position</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setPositionInPoints:</TokenIdentifier>
			<Abstract type="html">Position (x,y) of the node in points from the bottom left corner</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGPoint positionInPoints</Declaration>
			
			
			<Anchor>//api/name/positionInPoints</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/positionInPoints</TokenIdentifier>
			<Abstract type="html">Position (x,y) of the node in points from the bottom left corner</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGPoint positionInPoints</Declaration>
			
			
			<Anchor>//api/name/positionInPoints</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/positionInPoints</TokenIdentifier>
			<Abstract type="html">Position (x,y) of the node in points from the bottom left corner</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGPoint positionInPoints</Declaration>
			
			
			<Anchor>//api/name/positionInPoints</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setPositionType:</TokenIdentifier>
			<Abstract type="html">Defines the position type used for the X component of the position property</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) CCPositionType positionType</Declaration>
			
			
			<Anchor>//api/name/positionType</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/positionType</TokenIdentifier>
			<Abstract type="html">Defines the position type used for the X component of the position property</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) CCPositionType positionType</Declaration>
			
			
			<Anchor>//api/name/positionType</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/positionType</TokenIdentifier>
			<Abstract type="html">Defines the position type used for the X component of the position property</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) CCPositionType positionType</Declaration>
			
			
			<Anchor>//api/name/positionType</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setRotation:</TokenIdentifier>
			<Abstract type="html">The rotation (angle) of the node in degrees. 0 is the default rotation angle. Positive values rotate node CW.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float rotation</Declaration>
			
			
			<Anchor>//api/name/rotation</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/rotation</TokenIdentifier>
			<Abstract type="html">The rotation (angle) of the node in degrees. 0 is the default rotation angle. Positive values rotate node CW.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float rotation</Declaration>
			
			
			<Anchor>//api/name/rotation</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/rotation</TokenIdentifier>
			<Abstract type="html">The rotation (angle) of the node in degrees. 0 is the default rotation angle. Positive values rotate node CW.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float rotation</Declaration>
			
			
			<Anchor>//api/name/rotation</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setRotationalSkewX:</TokenIdentifier>
			<Abstract type="html">The rotation (angle) of the node in degrees. 0 is the default rotation angle. Positive values rotate node CW. It only modifies the X rotation performing a horizontal rotational skew .</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float rotationalSkewX</Declaration>
			
			
			<Anchor>//api/name/rotationalSkewX</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/rotationalSkewX</TokenIdentifier>
			<Abstract type="html">The rotation (angle) of the node in degrees. 0 is the default rotation angle. Positive values rotate node CW. It only modifies the X rotation performing a horizontal rotational skew .</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float rotationalSkewX</Declaration>
			
			
			<Anchor>//api/name/rotationalSkewX</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/rotationalSkewX</TokenIdentifier>
			<Abstract type="html">The rotation (angle) of the node in degrees. 0 is the default rotation angle. Positive values rotate node CW. It only modifies the X rotation performing a horizontal rotational skew .</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float rotationalSkewX</Declaration>
			
			
			<Anchor>//api/name/rotationalSkewX</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setRotationalSkewY:</TokenIdentifier>
			<Abstract type="html">The rotation (angle) of the node in degrees. 0 is the default rotation angle. Positive values rotate node CW. It only modifies the Y rotation performing a vertical rotational skew .</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float rotationalSkewY</Declaration>
			
			
			<Anchor>//api/name/rotationalSkewY</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/rotationalSkewY</TokenIdentifier>
			<Abstract type="html">The rotation (angle) of the node in degrees. 0 is the default rotation angle. Positive values rotate node CW. It only modifies the Y rotation performing a vertical rotational skew .</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float rotationalSkewY</Declaration>
			
			
			<Anchor>//api/name/rotationalSkewY</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/rotationalSkewY</TokenIdentifier>
			<Abstract type="html">The rotation (angle) of the node in degrees. 0 is the default rotation angle. Positive values rotate node CW. It only modifies the Y rotation performing a vertical rotational skew .</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float rotationalSkewY</Declaration>
			
			
			<Anchor>//api/name/rotationalSkewY</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setScale:</TokenIdentifier>
			<Abstract type="html">The scale factor of the node. 1.0 is the default scale factor. It modifies the X and Y scale at the same time.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float scale</Declaration>
			
			
			<Anchor>//api/name/scale</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/scale</TokenIdentifier>
			<Abstract type="html">The scale factor of the node. 1.0 is the default scale factor. It modifies the X and Y scale at the same time.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float scale</Declaration>
			
			
			<Anchor>//api/name/scale</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/scale</TokenIdentifier>
			<Abstract type="html">The scale factor of the node. 1.0 is the default scale factor. It modifies the X and Y scale at the same time.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float scale</Declaration>
			
			
			<Anchor>//api/name/scale</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setScaleX:</TokenIdentifier>
			<Abstract type="html">The scale factor of the node. 1.0 is the default scale factor. It only modifies the X scale factor.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float scaleX</Declaration>
			
			
			<Anchor>//api/name/scaleX</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/scaleX</TokenIdentifier>
			<Abstract type="html">The scale factor of the node. 1.0 is the default scale factor. It only modifies the X scale factor.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float scaleX</Declaration>
			
			
			<Anchor>//api/name/scaleX</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/scaleX</TokenIdentifier>
			<Abstract type="html">The scale factor of the node. 1.0 is the default scale factor. It only modifies the X scale factor.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float scaleX</Declaration>
			
			
			<Anchor>//api/name/scaleX</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setScaleY:</TokenIdentifier>
			<Abstract type="html">The scale factor of the node. 1.0 is the default scale factor. It only modifies the Y scale factor.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float scaleY</Declaration>
			
			
			<Anchor>//api/name/scaleY</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/scaleY</TokenIdentifier>
			<Abstract type="html">The scale factor of the node. 1.0 is the default scale factor. It only modifies the Y scale factor.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float scaleY</Declaration>
			
			
			<Anchor>//api/name/scaleY</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/scaleY</TokenIdentifier>
			<Abstract type="html">The scale factor of the node. 1.0 is the default scale factor. It only modifies the Y scale factor.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float scaleY</Declaration>
			
			
			<Anchor>//api/name/scaleY</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setSkewX:</TokenIdentifier>
			<Abstract type="html">The X skew angle of the node in degrees.
This angle describes the shear distortion in the X direction.
Thus, it is the angle between the Y axis and the left edge of the shape
The default skewX angle is 0. Positive values distort the node in a CW direction.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float skewX</Declaration>
			
			
			<Anchor>//api/name/skewX</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/skewX</TokenIdentifier>
			<Abstract type="html">The X skew angle of the node in degrees.
This angle describes the shear distortion in the X direction.
Thus, it is the angle between the Y axis and the left edge of the shape
The default skewX angle is 0. Positive values distort the node in a CW direction.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float skewX</Declaration>
			
			
			<Anchor>//api/name/skewX</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/skewX</TokenIdentifier>
			<Abstract type="html">The X skew angle of the node in degrees.
This angle describes the shear distortion in the X direction.
Thus, it is the angle between the Y axis and the left edge of the shape
The default skewX angle is 0. Positive values distort the node in a CW direction.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float skewX</Declaration>
			
			
			<Anchor>//api/name/skewX</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setSkewY:</TokenIdentifier>
			<Abstract type="html">The Y skew angle of the node in degrees.
This angle describes the shear distortion in the Y direction.
Thus, it is the angle between the X axis and the bottom edge of the shape
The default skewY angle is 0. Positive values distort the node in a CCW direction.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float skewY</Declaration>
			
			
			<Anchor>//api/name/skewY</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/skewY</TokenIdentifier>
			<Abstract type="html">The Y skew angle of the node in degrees.
This angle describes the shear distortion in the Y direction.
Thus, it is the angle between the X axis and the bottom edge of the shape
The default skewY angle is 0. Positive values distort the node in a CCW direction.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float skewY</Declaration>
			
			
			<Anchor>//api/name/skewY</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/skewY</TokenIdentifier>
			<Abstract type="html">The Y skew angle of the node in degrees.
This angle describes the shear distortion in the Y direction.
Thus, it is the angle between the X axis and the bottom edge of the shape
The default skewY angle is 0. Positive values distort the node in a CCW direction.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) float skewY</Declaration>
			
			
			<Anchor>//api/name/skewY</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setContentSize:</TokenIdentifier>
			<Abstract type="html">The untransformed size of the node in the unit specified by contentSizeType property. The contentSize remains the same no matter the node is scaled or rotated.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) CGSize contentSize</Declaration>
			
			
			<Anchor>//api/name/contentSize</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/contentSize</TokenIdentifier>
			<Abstract type="html">The untransformed size of the node in the unit specified by contentSizeType property. The contentSize remains the same no matter the node is scaled or rotated.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) CGSize contentSize</Declaration>
			
			
			<Anchor>//api/name/contentSize</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/contentSize</TokenIdentifier>
			<Abstract type="html">The untransformed size of the node in the unit specified by contentSizeType property. The contentSize remains the same no matter the node is scaled or rotated.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) CGSize contentSize</Declaration>
			
			
			<Anchor>//api/name/contentSize</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setContentSizeInPoints:</TokenIdentifier>
			<Abstract type="html">The untransformed size of the node in Points. The contentSize remains the same no matter the node is scaled or rotated.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGSize contentSizeInPoints</Declaration>
			
			
			<Anchor>//api/name/contentSizeInPoints</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/contentSizeInPoints</TokenIdentifier>
			<Abstract type="html">The untransformed size of the node in Points. The contentSize remains the same no matter the node is scaled or rotated.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGSize contentSizeInPoints</Declaration>
			
			
			<Anchor>//api/name/contentSizeInPoints</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/contentSizeInPoints</TokenIdentifier>
			<Abstract type="html">The untransformed size of the node in Points. The contentSize remains the same no matter the node is scaled or rotated.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGSize contentSizeInPoints</Declaration>
			
			
			<Anchor>//api/name/contentSizeInPoints</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setContentSizeType:</TokenIdentifier>
			<Abstract type="html">Defines the contentSize type used for the widht and height component of the contentSize property.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) CCContentSizeType contentSizeType</Declaration>
			
			
			<Anchor>//api/name/contentSizeType</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/contentSizeType</TokenIdentifier>
			<Abstract type="html">Defines the contentSize type used for the widht and height component of the contentSize property.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) CCContentSizeType contentSizeType</Declaration>
			
			
			<Anchor>//api/name/contentSizeType</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/contentSizeType</TokenIdentifier>
			<Abstract type="html">Defines the contentSize type used for the widht and height component of the contentSize property.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, assign) CCContentSizeType contentSizeType</Declaration>
			
			
			<Anchor>//api/name/contentSizeType</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setAnchorPoint:</TokenIdentifier>
			<Abstract type="html">anchorPoint is the point around which all transformations and positioning manipulations take place.
It&apos;s like a pin in the node where it is &quot;attached&quot; to its parent.
The anchorPoint is normalized, like a percentage. (0,0) means the bottom-left corner and (1,1) means the top-right corner.
But you can use values higher than (1,1) and lower than (0,0) too.
The default anchorPoint is (0,0). It starts in the bottom-left corner. CCSprite and other subclasses have a different default anchorPoint.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) CGPoint anchorPoint</Declaration>
			
			
			<Anchor>//api/name/anchorPoint</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/anchorPoint</TokenIdentifier>
			<Abstract type="html">anchorPoint is the point around which all transformations and positioning manipulations take place.
It&apos;s like a pin in the node where it is &quot;attached&quot; to its parent.
The anchorPoint is normalized, like a percentage. (0,0) means the bottom-left corner and (1,1) means the top-right corner.
But you can use values higher than (1,1) and lower than (0,0) too.
The default anchorPoint is (0,0). It starts in the bottom-left corner. CCSprite and other subclasses have a different default anchorPoint.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) CGPoint anchorPoint</Declaration>
			
			
			<Anchor>//api/name/anchorPoint</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/anchorPoint</TokenIdentifier>
			<Abstract type="html">anchorPoint is the point around which all transformations and positioning manipulations take place.
It&apos;s like a pin in the node where it is &quot;attached&quot; to its parent.
The anchorPoint is normalized, like a percentage. (0,0) means the bottom-left corner and (1,1) means the top-right corner.
But you can use values higher than (1,1) and lower than (0,0) too.
The default anchorPoint is (0,0). It starts in the bottom-left corner. CCSprite and other subclasses have a different default anchorPoint.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) CGPoint anchorPoint</Declaration>
			
			
			<Anchor>//api/name/anchorPoint</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setAnchorPointInPoints:</TokenIdentifier>
			<Abstract type="html">The anchorPoint in absolute pixels.
Since v0.8 you can only read it. If you wish to modify it, use anchorPoint instead</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGPoint anchorPointInPoints</Declaration>
			
			
			<Anchor>//api/name/anchorPointInPoints</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/anchorPointInPoints</TokenIdentifier>
			<Abstract type="html">The anchorPoint in absolute pixels.
Since v0.8 you can only read it. If you wish to modify it, use anchorPoint instead</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGPoint anchorPointInPoints</Declaration>
			
			
			<Anchor>//api/name/anchorPointInPoints</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/anchorPointInPoints</TokenIdentifier>
			<Abstract type="html">The anchorPoint in absolute pixels.
Since v0.8 you can only read it. If you wish to modify it, use anchorPoint instead</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CGPoint anchorPointInPoints</Declaration>
			
			
			<Anchor>//api/name/anchorPointInPoints</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/boundingBox</TokenIdentifier>
			<Abstract type="html">returns a &quot;local&quot; axis aligned bounding box of the node in points.
The returned box is relative only to its parent.
The returned box is in Points.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (CGRect)boundingBox</Declaration>
			
			
			<Anchor>//api/name/boundingBox</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/addChild:</TokenIdentifier>
			<Abstract type="html">Adds a child to the container with z-order as 0.
If the child is added to a &apos;running&apos; node, then &apos;onEnter&apos; and &apos;onEnterTransitionDidFinish&apos; will be called immediately.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)addChild:(CCNode *)node</Declaration>
			
			
			<Anchor>//api/name/addChild:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/addChild:z:</TokenIdentifier>
			<Abstract type="html">Adds a child to the container with a z-order.
If the child is added to a &apos;running&apos; node, then &apos;onEnter&apos; and &apos;onEnterTransitionDidFinish&apos; will be called immediately.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)addChild:(CCNode *)node z:(NSInteger)z</Declaration>
			
			
			<Anchor>//api/name/addChild:z:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/addChild:z:name:</TokenIdentifier>
			<Abstract type="html">Adds a child to the container with z order and tag.
If the child is added to a &apos;running&apos; node, then &apos;onEnter&apos; and &apos;onEnterTransitionDidFinish&apos; will be called immediately.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)addChild:(CCNode *)node z:(NSInteger)z name:(NSString *)name</Declaration>
			
			
			<Anchor>//api/name/addChild:z:name:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/removeFromParent</TokenIdentifier>
			<Abstract type="html">Remove itself from its parent node forcing a cleanup.
If the node orphan, then nothing happens.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)removeFromParent</Declaration>
			
			
			<Anchor>//api/name/removeFromParent</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/removeFromParentAndCleanup:</TokenIdentifier>
			<Abstract type="html">Remove itself from its parent node. If cleanup is YES, then also remove all actions and callbacks.
If the node orphan, then nothing happens.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)removeFromParentAndCleanup:(BOOL)cleanup</Declaration>
			
			
			<Anchor>//api/name/removeFromParentAndCleanup:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/removeChild:</TokenIdentifier>
			<Abstract type="html">Removes a child from the container forcing a cleanup</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)removeChild:(CCNode *)child</Declaration>
			
			
			<Anchor>//api/name/removeChild:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/removeChild:cleanup:</TokenIdentifier>
			<Abstract type="html">Removes a child from the container. It will also cleanup all running actions depending on the cleanup parameter.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)removeChild:(CCNode *)node cleanup:(BOOL)cleanup</Declaration>
			
			
			<Anchor>//api/name/removeChild:cleanup:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/removeChildByName:</TokenIdentifier>
			<Abstract type="html">Removes a child from the container by tag value forcing a cleanup.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)removeChildByName:(NSString *)name</Declaration>
			
			
			<Anchor>//api/name/removeChildByName:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/removeChildByName:cleanup:</TokenIdentifier>
			<Abstract type="html">Removes a child from the container by tag value. It will also cleanup all running actions depending on the cleanup parameter</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)removeChildByName:(NSString *)name cleanup:(BOOL)cleanup</Declaration>
			
			
			<Anchor>//api/name/removeChildByName:cleanup:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/removeAllChildren</TokenIdentifier>
			<Abstract type="html">Removes all children from the container forcing a cleanup.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)removeAllChildren</Declaration>
			
			
			<Anchor>//api/name/removeAllChildren</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/removeAllChildrenWithCleanup:</TokenIdentifier>
			<Abstract type="html">Removes all children from the container and do a cleanup all running actions depending on the cleanup parameter.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)removeAllChildrenWithCleanup:(BOOL)cleanup</Declaration>
			
			
			<Anchor>//api/name/removeAllChildrenWithCleanup:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setParent:</TokenIdentifier>
			<Abstract type="html">A weak reference to the parent</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, unsafe_unretained) CCNode *parent</Declaration>
			
			
			<Anchor>//api/name/parent</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/parent</TokenIdentifier>
			<Abstract type="html">A weak reference to the parent</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, unsafe_unretained) CCNode *parent</Declaration>
			
			
			<Anchor>//api/name/parent</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/parent</TokenIdentifier>
			<Abstract type="html">A weak reference to the parent</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite, unsafe_unretained) CCNode *parent</Declaration>
			
			
			<Anchor>//api/name/parent</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setChildren:</TokenIdentifier>
			<Abstract type="html">Array of children</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *children</Declaration>
			
			
			<Anchor>//api/name/children</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/children</TokenIdentifier>
			<Abstract type="html">Array of children</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *children</Declaration>
			
			
			<Anchor>//api/name/children</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/children</TokenIdentifier>
			<Abstract type="html">Array of children</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *children</Declaration>
			
			
			<Anchor>//api/name/children</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/getChildByName:</TokenIdentifier>
			<Abstract type="html">Gets a child from the container given its tag</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (CCNode *)getChildByName:(NSString *)name</Declaration>
			
			<ReturnValue><Abstract type="html">returns a CCNode object</Abstract></ReturnValue>
			<Anchor>//api/name/getChildByName:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setZOrder:</TokenIdentifier>
			<Abstract type="html">The z order of the node relative to its &quot;siblings&quot;: children of the same parent</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSInteger zOrder</Declaration>
			
			
			<Anchor>//api/name/zOrder</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/zOrder</TokenIdentifier>
			<Abstract type="html">The z order of the node relative to its &quot;siblings&quot;: children of the same parent</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSInteger zOrder</Declaration>
			
			
			<Anchor>//api/name/zOrder</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/zOrder</TokenIdentifier>
			<Abstract type="html">The z order of the node relative to its &quot;siblings&quot;: children of the same parent</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSInteger zOrder</Declaration>
			
			
			<Anchor>//api/name/zOrder</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/hitTestWithWorldPos:</TokenIdentifier>
			<Abstract type="html">check if a touch is inside the node
to expand or shrink the touch area of a node, override this method</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (BOOL)hitTestWithWorldPos:(CGPoint)pos</Declaration>
			
			
			<Anchor>//api/name/hitTestWithWorldPos:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setHitAreaExpansion:</TokenIdentifier>
			<Abstract type="html">Expands ( or contracts ) the hit area of the node, value is a normalized fraction of the content size.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) float hitAreaExpansion</Declaration>
			
			
			<Anchor>//api/name/hitAreaExpansion</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/hitAreaExpansion</TokenIdentifier>
			<Abstract type="html">Expands ( or contracts ) the hit area of the node, value is a normalized fraction of the content size.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) float hitAreaExpansion</Declaration>
			
			
			<Anchor>//api/name/hitAreaExpansion</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/hitAreaExpansion</TokenIdentifier>
			<Abstract type="html">Expands ( or contracts ) the hit area of the node, value is a normalized fraction of the content size.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) float hitAreaExpansion</Declaration>
			
			
			<Anchor>//api/name/hitAreaExpansion</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/onEnter</TokenIdentifier>
			<Abstract type="html">Event that is called every time the CCNode enters the &apos;stage&apos;.
If the CCNode enters the &apos;stage&apos; with a transition, this event is called when the transition starts.
During onEnter you can&apos;t access a sibling node.
If you override onEnter, you shall call [super onEnter].</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)onEnter</Declaration>
			
			
			<Anchor>//api/name/onEnter</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/onEnterTransitionDidFinish</TokenIdentifier>
			<Abstract type="html">Event that is called when the CCNode enters in the &apos;stage&apos;.
If the CCNode enters the &apos;stage&apos; with a transition, this event is called when the transition finishes.
If you override onEnterTransitionDidFinish, you shall call [super onEnterTransitionDidFinish].</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)onEnterTransitionDidFinish</Declaration>
			
			
			<Anchor>//api/name/onEnterTransitionDidFinish</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/onExit</TokenIdentifier>
			<Abstract type="html">Event that is called every time the CCNode leaves the &apos;stage&apos;.
If the CCNode leaves the &apos;stage&apos; with a transition, this event is called when the transition finishes.
During onExit you can&apos;t access a sibling node.
If you override onExit, you shall call [super onExit].</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)onExit</Declaration>
			
			
			<Anchor>//api/name/onExit</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/onExitTransitionDidStart</TokenIdentifier>
			<Abstract type="html">callback that is called every time the CCNode leaves the &apos;stage&apos;.
If the CCNode leaves the &apos;stage&apos; with a transition, this callback is called when the transition starts.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)onExitTransitionDidStart</Declaration>
			
			
			<Anchor>//api/name/onExitTransitionDidStart</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setScene:</TokenIdentifier>
			<Abstract type="html">The scene this node is added to, or nil if it&apos;s not part of a scene.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CCScene *scene</Declaration>
			
			
			<Anchor>//api/name/scene</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/scene</TokenIdentifier>
			<Abstract type="html">The scene this node is added to, or nil if it&apos;s not part of a scene.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CCScene *scene</Declaration>
			
			
			<Anchor>//api/name/scene</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/scene</TokenIdentifier>
			<Abstract type="html">The scene this node is added to, or nil if it&apos;s not part of a scene.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) CCScene *scene</Declaration>
			
			
			<Anchor>//api/name/scene</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setRunningInActiveScene:</TokenIdentifier>
			<Abstract type="html">Returns YES if the node is added to an active scene and neither it nor any of it&apos;s ancestors is paused.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isRunningInActiveScene) BOOL runningInActiveScene</Declaration>
			
			
			<Anchor>//api/name/runningInActiveScene</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/isRunningInActiveScene</TokenIdentifier>
			<Abstract type="html">Returns YES if the node is added to an active scene and neither it nor any of it&apos;s ancestors is paused.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isRunningInActiveScene) BOOL runningInActiveScene</Declaration>
			
			
			<Anchor>//api/name/runningInActiveScene</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/runningInActiveScene</TokenIdentifier>
			<Abstract type="html">Returns YES if the node is added to an active scene and neither it nor any of it&apos;s ancestors is paused.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isRunningInActiveScene) BOOL runningInActiveScene</Declaration>
			
			
			<Anchor>//api/name/runningInActiveScene</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/setPhysicsBody:</TokenIdentifier>
			<Abstract type="html">The physics body (if any) that this node is attached to.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) CCPhysicsBody *physicsBody</Declaration>
			
			
			<Anchor>//api/name/physicsBody</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/physicsBody</TokenIdentifier>
			<Abstract type="html">The physics body (if any) that this node is attached to.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) CCPhysicsBody *physicsBody</Declaration>
			
			
			<Anchor>//api/name/physicsBody</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCNode/physicsBody</TokenIdentifier>
			<Abstract type="html">The physics body (if any) that this node is attached to.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) CCPhysicsBody *physicsBody</Declaration>
			
			
			<Anchor>//api/name/physicsBody</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/runAction:</TokenIdentifier>
			<Abstract type="html">Executes an action, and returns the action that is executed.
The node becomes the action&apos;s target.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (CCAction *)runAction:(CCAction *)action</Declaration>
			
			<ReturnValue><Abstract type="html">An Action pointer</Abstract></ReturnValue>
			<Anchor>//api/name/runAction:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/stopAllActions</TokenIdentifier>
			<Abstract type="html">Removes all actions from the running action list</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)stopAllActions</Declaration>
			
			
			<Anchor>//api/name/stopAllActions</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/stopAction:</TokenIdentifier>
			<Abstract type="html">Removes an action from the running action list</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)stopAction:(CCAction *)action</Declaration>
			
			
			<Anchor>//api/name/stopAction:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/stopActionByTag:</TokenIdentifier>
			<Abstract type="html">Removes an action from the running action list given its tag</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)stopActionByTag:(NSInteger)tag</Declaration>
			
			
			<Anchor>//api/name/stopActionByTag:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/getActionByTag:</TokenIdentifier>
			<Abstract type="html">Gets an action from the running action list given its tag</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (CCAction *)getActionByTag:(NSInteger)tag</Declaration>
			
			<ReturnValue><Abstract type="html">the Action the with the given tag</Abstract></ReturnValue>
			<Anchor>//api/name/getActionByTag:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/numberOfRunningActions</TokenIdentifier>
			<Abstract type="html">Returns the numbers of actions that are running plus the ones that are schedule to run (actions in actionsToAdd and actions arrays).
Composable actions are counted as 1 action. Example:
If you are running 1 Sequence of 7 actions, it will return 1.
If you are running 7 Sequences of 2 actions, it will return 7.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (NSUInteger)numberOfRunningActions</Declaration>
			
			
			<Anchor>//api/name/numberOfRunningActions</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/schedule:interval:</TokenIdentifier>
			<Abstract type="html">schedules a custom selector with an interval time in seconds.
If time is 0 it will be ticked every frame.
If time is 0, it is recommended to use &apos;scheduleUpdate&apos; instead.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (CCTimer *)schedule:(SEL)s interval:(CCTime)seconds</Declaration>
			
			
			<Anchor>//api/name/schedule:interval:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/schedule:interval:repeat:delay:</TokenIdentifier>
			<Abstract type="html">repeat will execute the action repeat + 1 times, for a continues action use kCCRepeatForever
delay is the amount of time the action will wait before execution</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (CCTimer *)schedule:(SEL)selector interval:(CCTime)interval repeat:(uint)repeat delay:(CCTime)delay</Declaration>
			
			
			<Anchor>//api/name/schedule:interval:repeat:delay:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/scheduleOnce:delay:</TokenIdentifier>
			<Abstract type="html">Schedules a selector that runs only once, with a delay of 0 or larger</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (CCTimer *)scheduleOnce:(SEL)selector delay:(CCTime)delay</Declaration>
			
			
			<Anchor>//api/name/scheduleOnce:delay:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/transform</TokenIdentifier>
			<Abstract type="html">performs OpenGL view-matrix transformation based on position, scale, rotation and other attributes.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)transform</Declaration>
			
			
			<Anchor>//api/name/transform</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/nodeToParentTransform</TokenIdentifier>
			<Abstract type="html">Returns the matrix that transform the node&apos;s (local) space coordinates into the parent&apos;s space coordinates.
The matrix is in Pixels.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (CGAffineTransform)nodeToParentTransform</Declaration>
			
			
			<Anchor>//api/name/nodeToParentTransform</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/parentToNodeTransform</TokenIdentifier>
			<Abstract type="html">Returns the matrix that transform parent&apos;s space coordinates to the node&apos;s (local) space coordinates.
The matrix is in Pixels.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (CGAffineTransform)parentToNodeTransform</Declaration>
			
			
			<Anchor>//api/name/parentToNodeTransform</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/nodeToWorldTransform</TokenIdentifier>
			<Abstract type="html">Returns the world affine transform matrix. The matrix is in Pixels.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (CGAffineTransform)nodeToWorldTransform</Declaration>
			
			
			<Anchor>//api/name/nodeToWorldTransform</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/worldToNodeTransform</TokenIdentifier>
			<Abstract type="html">Returns the inverse world affine transform matrix. The matrix is in Pixels.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (CGAffineTransform)worldToNodeTransform</Declaration>
			
			
			<Anchor>//api/name/worldToNodeTransform</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/convertToNodeSpace:</TokenIdentifier>
			<Abstract type="html">Converts a Point to node (local) space coordinates. The result is in Points.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (CGPoint)convertToNodeSpace:(CGPoint)worldPoint</Declaration>
			
			
			<Anchor>//api/name/convertToNodeSpace:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/convertToWorldSpace:</TokenIdentifier>
			<Abstract type="html">Converts a Point to world space coordinates. The result is in Points.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (CGPoint)convertToWorldSpace:(CGPoint)nodePoint</Declaration>
			
			
			<Anchor>//api/name/convertToWorldSpace:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/convertToNodeSpaceAR:</TokenIdentifier>
			<Abstract type="html">Converts a Point to node (local) space coordinates. The result is in Points.
treating the returned/received node point as anchor relative.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (CGPoint)convertToNodeSpaceAR:(CGPoint)worldPoint</Declaration>
			
			
			<Anchor>//api/name/convertToNodeSpaceAR:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/convertToWorldSpaceAR:</TokenIdentifier>
			<Abstract type="html">Converts a local Point to world space coordinates.The result is in Points.
treating the returned/received node point as anchor relative.</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (CGPoint)convertToWorldSpaceAR:(CGPoint)nodePoint</Declaration>
			
			
			<Anchor>//api/name/convertToWorldSpaceAR:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/draw</TokenIdentifier>
			<Abstract type="html">Override this method to draw your own node.
You should use cocos2d&apos;s GL API to enable/disable the GL state / shaders.
For further info, please see ccGLstate.h.
You shall NOT call [super draw];</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)draw</Declaration>
			
			
			<Anchor>//api/name/draw</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/visit</TokenIdentifier>
			<Abstract type="html">recursive method that visit its children and draw them</Abstract>
			<DeclaredIn>CCNode.h</DeclaredIn>
			
			<Declaration>- (void)visit</Declaration>
			
			
			<Anchor>//api/name/visit</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/walkSceneGraph:</TokenIdentifier>
			<Abstract type="html">prints on the debug console the scene graph</Abstract>
			<DeclaredIn>CCNode+Debug.h</DeclaredIn>
			
			<Declaration>- (void)walkSceneGraph:(NSUInteger)level</Declaration>
			
			
			<Anchor>//api/name/walkSceneGraph:</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCNode/physicsNode</TokenIdentifier>
			<Abstract type="html">Nearest CCPhysicsNode ancestor of this node, or nil if none.
Unlike CCPhysicsBody.physicsNode, this will return a value before onEnter is called on the node.</Abstract>
			<DeclaredIn>CCPhysicsNode.h</DeclaredIn>
			
			<Declaration>- (CCPhysicsNode *)physicsNode</Declaration>
			
			
			<Anchor>//api/name/physicsNode</Anchor>
            <NodeRef refid="89"/>
		</Token>
		
        
	</File>
</Tokens>